@use 'sass:map';
@use 'sass:math';

@mixin mq($breakpoint) {
  $breakpoints: (
    sp: '(width < 768px)',
    // tab: '(width < 768px)',
    pc: '(width > 767px)',
  );
  @if map-has-key($breakpoints, $breakpoint) {
    @media #{map.get($breakpoints, $breakpoint)} {
      @content;
    }
  } @else {
    @error "指定されたブレークポイントは定義されていません。" + "指定できるブレークポイントは次のとおりです。 => #{map.keys($breakpoints)}";
  }
}

// max-width,min-width感覚でメディアクエリしたい場合
@mixin mq-min($breakpoint) {
  @media (min-width: #{$breakpoint}px) {
    @content;
  }
}
@mixin mq-max($breakpoint) {
  @media (max-width: #{$breakpoint}px) {
    @content;
  }
}
@mixin mq-minmax($breakpoint) {
  @media (min-width: #{$breakpointMin}px) and (max-width: #{$breakpointMax}px) {
    @content;
  }
}

// デバイスのピクセル数感覚でメディアクエリしたい場合
@mixin mq-below($breakpoint) {
  @media (max-width: #{$breakpoint - 0.02}px) {
    // @media (width < #{$breakpoint}px) {
    @content;
  }
}
@mixin mq-above($breakpoint) {
  // @media (min-width: #{$breakpoint}px) {
  //   // @media (width >= #{$breakpoint}px) {
  //   @content;
  // }
  @media not (max-width: #{$breakpoint - 0.02}px) {
    @content;
  }
}
@mixin mq-between($breakpointMin, $breakpointMax) {
  // @media (#{$breakpointMin}px > width >= #{$breakpointMax}px) {
  @media (min-width: #{$breakpointMin}px) and (max-width: #{$breakpointMax - 0.02}px) {
    @content;
  }
}

// hover
@mixin hover {
  @media (any-hover: hover) {
    &:where(:any-link, :enabled, summary):hover {
      @content;
    }
  }
}

@mixin hover-child {
  @media (any-hover: hover) {
    &:is(:where(:any-link, :enabled, summary):hover *) {
      @content;
    }
  }
}

@mixin hover-normal {
  @media (any-hover: hover) {
    @content;
  }
}

// hover & active
// @mixin hover-active {
//   @media (any-hover: hover) {
//     &:where(:any-link, :enabled, summary):hover {
//       @content;
//     }
//   }
//   @media (any-hover: none) {
//     &:where(:any-link, :enabled, summary):active {
//       @content;
//     }
//   }
// }

// hover & Touch
// @mixin touch {
//   &:where(:any-link, :enabled, summary):hover {
//     @content;
//   }
// }

// @mixin mq-test($widthContent) {

//   $X: math.div($widthContent, (1 - 0.1));
//   $Y: math.div(($X - $widthContent),2);
//   $breakpoint: $widthContent + $Y;
//   @media (max-width: #{$breakpoint}px) {
//     @content;
//   }
// }

@mixin extra($property, $value, $maxWidthContent) {
  #{$property}: calc(((100vw - var(--scrollbarWidth)) - $maxWidthContent) / 2);

  @if str-index(#{$value}, 'px') {
    $totalValue: $value * 2;
    $breakpoint: $maxWidthContent + $totalValue;
    @media (max-width: $breakpoint) {
      #{$property}: #{$value};
    }
  } @else if str-index(#{$value}, '%') {
    $totalValue: $value * 2;
    $percent: 100% - $totalValue;
    $percent_as_number: math.div($percent, 100%);
    $breakpoint: math.div($maxWidthContent, $percent_as_number);
    // $breakpoint: $breakpoint + var(--scrollbarWidth);
    @media (max-width: $breakpoint) {
      #{$property}: #{$value};
    }
  } @else {
    @error "指定された値、単位が正しくありません。指定できる値、単位は次のとおりです。 => extra(プロパティ名, 値[px, %], 最大コンテンツ幅)";
  }
}
